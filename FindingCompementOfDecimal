class Solution {
public:
    long long int power(int n, int exp) {
        if (exp == 0)
            return 1;
        else if (exp == 1)
            return n;
        long long int ans = n;
        for (int i = 0; i < exp - 1; i++)
            ans *= n;
        return ans;
    }
    
    int BtoD(vector<int>& a) {
        int sum = 0;
        for (int i = a.size() - 1; i >= 0; i--) {
            sum += a[i] * power(2, i);
        }
        return sum;
    }

    vector<int> DtoB(int num) {
        vector<int> a;
        

            while (num>=1) {
                int t = num % 2;
                if (t == 1) {
                    a.push_back(0);
                } else {
                    a.push_back(1);
                }
                num /= 2;
            }
        
        
        return a;
    }
    int findComplement(int num) {
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);

        vector<int> a;
        a = DtoB(num);
        int ans = BtoD(a);
        return ans;
    }
};
